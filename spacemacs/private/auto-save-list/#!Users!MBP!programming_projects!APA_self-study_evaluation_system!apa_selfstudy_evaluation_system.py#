#! /usr/bin/env python3
# -*- coding: utf-8 -*-


import shutil
import analysis
analyses = analysis.Analysis()


def print_header():
    """Prints a header with the University name and the software's name."""

    terminal_width, terminal_height = shutil.get_terminal_size()
    print("\n"*150)
    print("Ponce Health Sciences University".center(terminal_width, ' '))
    print("School of Behavioral and Brain Sciences".center(terminal_width, ' '))
    print("APA Self-study Analysis Software".center(terminal_width, ' '))
    print('\n'*(terminal_height-10))


print_header()
analyses.get_dataset()
analyses.convert_columns_lowercase()
analyses.replace_alphanumeric_with_numeric_values()
analyses.recode_missing_values()

cohorts = [2010, 2011, 2012, 2013, 2014, 2015, 2016]


def run_analysis(dataLabel, threshold, analysisLevel):
    for year in cohorts:
        data = analyses.data[analyses.data["acceptance year"] == year]
        data = data[dataLabel]
        data = analyses.change_data_format(data)
        data = analyses.handle_missing_values(data)
        if len(data) == 0:
            print("Criterion", dataLabel, "for cohort", year, "couldn't be analyzed due to insufficient data")
        elif analysisLevel == "average":
            result = analyses.eval_criteria_average_level(data, threshold)
            print("Average analysis - cohort", year, "- criterion", dataLabel, " = ", result)
        elif analysisLevel == "item":
            result = analyses.eval_criteria_item_level(data, threshold)
            print("Item analysis - cohort", year, "- criterion", dataLabel, " = ", round(result, 2))


itemLevelAnalysisToRun = [
    [["s9"], 1],
    [["r7"], 1],
    [["e1"], 3],
    [["e2"], 3],
    [["e3"], 70],
    [["indiv1"], 3],
    [["indiv3"], 3],
    [["refle1"], 4],
    [["cpx6"], 70],
    [["inter1"], 1],
    [["assess5"], 4],
    [["cpxt"], 70],
    [["cons3"], 3],
    [["assess6", "assess7"], 1],
    [["indiv4"], 1],
    [["cons5"], 1],
    [["indiv5"], 3],
    [["psych7"], 4],
    [["prof1"], 3],
    [['refle1'], 4],
    [['psych2'], 1],
    [['psych3'], 1],
    [['psych4'], 1],
    [['psych5'], 1],
    [['psych6'], 1],
    [['s5'], 2],
    [['assess3'], 3],
    [['assess1'], 3],
    [['assess4'], 3],
    [['assess7'], 1],
    [['r3'], 1],
    [['r4'], 1],
    [['r5'], 1],
    [['r8'], 1],
    [['indiv8'], 3],
    [['indiv9'], 3],
    [['assess8'], 3]
]

averageLevelAnalysisToRun = [
    [["r1", "r2"], 3],
    [["refle1", "refle2"], 3],
    [["assess1", "assess2", "assess3", "assess4"], 3],
    [["psych5", "psych6"], 1],
    [["cons3", "cons4"], 3],
    [['indiv6', 'indiv7'], 4],
    [
        ['r9_knowledge1', 'r9_knowledge2', 'r9_knowledge3',
         'r9_knowledge4', 'r9_knowledge5',
         'r9_skills1', 'r9_skills2', 'r9_skills3', 'r9_skills4',
         'r9_skills5', 'r9_skills6', 'r9_skills7', 'r9_skills8',
         'r9_skills9', 'r9_skills10', 'r9_skills11',
         'r9_attitudes1', 'r9_attitudes2', 'r9_attitudes3', 'r9_attitudes4',
         'r9_attitudes5', 'r9_attitudes6', 'r9_attitudes7'],
        3

]

print("Results item level")
for specifiedData in itemLevelAnalysisToRun:
    run_analysis(specifiedData[0], specifiedData[1], analysisLevel="item")

print("-"*50)
print("Results average level")
for specifiedData in averageLevelAnalysisToRun:
    run_analysis(specifiedData[0], specifiedData[1], analysisLevel="average")


print()
print("Data was analyzed successfully.")
print()
