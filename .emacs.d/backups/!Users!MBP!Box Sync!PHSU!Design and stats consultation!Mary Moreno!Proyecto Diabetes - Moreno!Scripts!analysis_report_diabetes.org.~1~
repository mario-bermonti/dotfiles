* General functions :noexport:UsefulScript: :noexport:
#+BEGIN_SRC ipython :session  :exports both :results output
import tabulate
import pandas as pd
import numpy as np
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[1]:
:END:



This function formats df's as orgmode tables.
#+BEGIN_SRC ipython :session  :exports results :results output
  def format_as_table(data, showindex='always', series=False):
      """Returns an orgmode table."""
      if series:
          data.name = data.index[0]
          data = data.to_frame()
          showindex = False
      table = tabulate.tabulate(
          data,
          headers='keys',
          tablefmt='orgtbl',
          showindex=showindex
      )
      return table
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[2]:
:END:

This function formats .describe() results.
#+BEGIN_SRC ipython :session  :exports results :results output
  def format_descriptive_stats(data, toframe=False, transpose=False, reduce=False):
      """Formats the results of descriptive statistics conducted by
      the pandas' describe method into a format suitable for reporting
      in stats reports.
      """
      data_formatted = data.round(2)
      if toframe:
          data_formatted = data_formatted.to_frame()
      if transpose:
          data_formatted = data_formatted.transpose()
      # has to happen here so it SD gets the correct sentence case
      data_formatted.rename(columns=str.capitalize, inplace=True)
      data_formatted.rename(columns={'50%': 'Median', 'Std': 'SD'}, inplace=True)
      if reduce:
          data_formatted.drop(['Count', '25%', '75%'], axis=1)
      data_formatted = data_formatted[['Mean', 'Median', 'SD', 'Min', 'Max']]
      return data_formatted
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[3]:
:END:

This function formats the results of freq analysis (.value_counts()).
#+BEGIN_SRC ipython :session  :exports results :results output
  def freq_of_multiple_columns(data):
      """Conducts frequency analysis (value_counts) to each column of a
      pandas df and format it as a table sui
      table for statistical
      analysis reports.

      Parameters:
      -----------
      data: pandas df that may contain multiple columns. This contains the
            data that will be analyzed.

      Returns: a str that contains the results for all the columns.
      -------

      Notes:
      -----
      1. You need to print the return value of the function in order
         for it to appear in orgmode results.
      2. Uses tabulate for formatting the table.
      3. value_counts are normalized

      """
      results_formatted = ''
      for var in data:
          results = data[var].value_counts(normalize=True)
          results = results.round(4).to_frame() * 100
          na_count = data[var].isna().sum()
          # Doesn't work (it works with similar examples
          #results.loc['Missing values'] = na_count
          results.columns = results.columns.str.capitalize() + ' (%)'
          results = tabulate.tabulate(results, headers='keys', tablefmt='orgtbl', showindex='always')
          results_formatted += '{} \n #+begin_tablenotes \n Missing values: {} \n' \
              '#+end_tablenotes \n\n'.format(results, na_count)
      return results_formatted
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[4]:
:END:


#+BEGIN_SRC ipython :session  :exports results :results output
  def freq_of_multiple_columns1(data):
      """Conducts frequency analysis (value_counts) to each column of a
      pandas df and format it as a table suitable for statistical
      analysis reports.

      Parameters:
      -----------
      data: pandas df that may contain multiple columns. This contains the
            data that will be analyzed.

      Returns: a str that contains the results for all the columns.
      -------

      Notes:
      -----
      1. You need to print the return value of the function in order
         for it to appear in orgmodes results.
      2. Uses tabulate for formatting the table.
      3. value_counts are normalized

      """
      results_formatted = ''
      for var in data:
          results = data[var].value_counts(normalize=True)
          results = results.round(4).to_frame() * 100
          print(results.info())
          na_count = data[var].isna().sum()
          # Doesn't work (it works with similar examples
          #results.loc['d'] = na_count
          print('c', results.columns)
          if isinstance(results.index, pd.CategoricalIndex):
              print('i', results.index.categories)
          results.columns = results.columns.str.capitalize() + ' (%)'
          results = tabulate.tabulate(results, headers='keys', tablefmt='orgtbl', showindex='always')
          results_formatted += '{} \n #+begin_tablenotes \n Missing values: {} \n' \
              '#+end_tablenotes \n\n'.format(results, na_count)
      return results_formatted
  d = pd.DataFrame({'a':[1, 2, 3, 4, 5], 'b': [11, 12, 13, 14, 15]})
  print(freq_of_multiple_columns1(d))
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[5]:
# output
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 5 to 1
Data columns (total 1 columns):
a    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['a'], dtype='object')
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 15 to 11
Data columns (total 1 columns):
b    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['b'], dtype='object')
|----+---------|
|    |   A (%) |
|----+---------|
|  5 |      20 |
|  4 |      20 |
|  3 |      20 |
|  2 |      20 |
|  1 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes

|----+---------|
|    |   B (%) |
|----+---------|
| 15 |      20 |
| 14 |      20 |
| 13 |      20 |
| 12 |      20 |
| 11 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes



:END:

* Data preparation
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_dir = '../Data/18-03-2019/'
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[11]:
:END:

* Demo data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  import pandas as pd
  data_demo_path = '{}Demo_bd_diabetes 18_marzo_19_PVG_REV.xlsx'.format(data_dir)
  data_demo_master = pd.read_excel(data_demo_path)
  data_demo_master.info()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[10]:
# output

FileNotFoundErrorTraceback (most recent call last)
<ipython-input-10-d248cdf75f70> in <module>()
      1 import pandas as pd
      2 data_demo_path = '{}Demo_bd_diabetes 18_marzo_19_PVG_REV.xlsx'.format(data_dir)
----> 3 data_demo_master = pd.read_excel(data_demo_path)
      4 data_demo_master.info()

/usr/local/lib/python3.6/site-packages/pandas/util/_decorators.py in wrapper(*args, **kwargs)
    116                 else:
    117                     kwargs[new_arg_name] = new_arg_value
--> 118             return func(*args, **kwargs)
    119         return wrapper
    120     return _deprecate_kwarg

/usr/local/lib/python3.6/site-packages/pandas/io/excel.py in read_excel(io, sheet_name, header, skiprows, skip_footer, index_col, names, usecols, parse_dates, date_parser, na_values, thousands, convert_float, converters, dtype, true_values, false_values, engine, squeeze, **kwds)
    228
    229     if not isinstance(io, ExcelFile):
--> 230         io = ExcelFile(io, engine=engine)
    231
    232     return io._parse_excel(

/usr/local/lib/python3.6/site-packages/pandas/io/excel.py in __init__(self, io, **kwds)
    292             self.book = xlrd.open_workbook(file_contents=data)
    293         elif isinstance(self._io, compat.string_types):
--> 294             self.book = xlrd.open_workbook(self._io)
    295         else:
    296             raise ValueError('Must explicitly set engine if not passing in'

/usr/local/lib/python3.6/site-packages/xlrd/__init__.py in open_workbook(filename, logfile, verbosity, use_mmap, file_contents, encoding_override, formatting_info, on_demand, ragged_rows)
    114         peek = file_contents[:peeksz]
    115     else:
--> 116         with open(filename, "rb") as f:
    117             peek = f.read(peeksz)
    118     if peek == b"PK\x03\x04": # a ZIP file

FileNotFoundError: [Errno 2] No such file or directory: './Data/18-03-2019/Demo_bd_diabetes 18_marzo_19_PVG_REV.xlsx'
:END:

* Cognitive data
