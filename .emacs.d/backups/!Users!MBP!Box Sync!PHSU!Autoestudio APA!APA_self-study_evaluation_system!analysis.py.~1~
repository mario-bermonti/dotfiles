#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import statistics
import pandas as pd


class Analysis(object):
    def convert_columns_lowercase(self):
        """Converts column names to lower case letters"""

        self.data.rename(columns=str.lower, inplace=True)

    def eval_criteria_average_level(self, data, threshold):
        """returns the percentage of students that meet the criteria at the
        average level.
        """

        if len(data) == 0:
            return "No data for analysis available."

        count = 0
        for studentsData in data:
            if self.average_level_criteria(studentsData, threshold):
                count += 1

        return count/(len(data)) * 100

    def eval_criteria_item_level(self, data, threshold):
        """returns the percentage of students that meet the criteria at the
        item level.
        """

        if len(data) == 0:
            return "No data for analysis available."

        count = 0
        for studentsData in data:
            if self.item_level_criteria(studentsData, threshold):
                count += 1

        return count/(len(data)) * 100

    def change_data_format(self, data):
        """Takes an pandas array and changes it into a list of lists, where
        every internal list is a row.
        """

        newData = []
        for row, column in data.iterrows():
            newData.append(list(column))

        return newData

    def average_level_criteria(self, data, threshold):
        """Returns True if the average score is above the threshold. Otherwise
        returns False.
        """

        studentMean = statistics.mean(data)

        return studentMean >= threshold

    def item_level_criteria(self, data, threshold):
        """Returns False if the score for any item in data is below the threshold.
        Otherwise returns True.
        """

        for score in data:
            if score < threshold:
                return False
        return True

    def item_level_alphanumeric_criteria(self, data, threshold):
        """Returns False if the score for any item in data is below the threshold.
        Otherwise returns True.
        """

        for score in data:
            if score > threshold:
                return False
        return True

    def get_dataset(self, debug=False):
        """Reads the dataset to be used.

        -----------
        Parameters
        debug: boolean. If True, the dataset used is the one for testing."""

        if debug:
            self.data = pd.read_excel("testdata.xlsx")
        else:
            filename = self.get_filename()
            validFile = 0
            while not validFile:
                try:
                    self.data = pd.read_excel(filename)
                    validFile = 1

                except FileNotFoundError:
                    print('\n')
                    print("Error: There is no file with that name.")
                    print("Please try again.")
                    filename = self.get_filename()

    def filter_data_by_year(self, year):
        """Filters data by admission year."""

        return self.data[self.data["acceptance year"] == year]

    def get_filename(self):
        """Asks the user for the filename of the data base and returns it."""

        filename = input("Enter the name of the file: ")
        filename = filename + ".xlsx"

        return filename

    def get_specified_data(self, specifications):
        """returns the student's data specified by the caller.
        --------
        Parameters
        data: pandas array
        specifications: list of strings.
        """

        return self.data[specifications]

    def replace_alphanumeric_with_numeric_values(self):
        """Replaces alphanumeric values with numeric values for appropriate
        variables so analyses can be done.
        """
        self.data.replace(
            to_replace=["a", "b", "c", "d", "f", "p", "ap", "np", "w", "i", "ip"],
            value=[4, 3, 2, 1, 0, 1, 1, 0, 0, 0, 0],
            inplace=True
        )

    def recode_missing_values(self):
        """Recode missing values to 999 so they can be more easily excluded
        from analyses.
        """

        self.data.fillna(999, inplace=True)

    def handle_missing_values(self, data):
        """Returns a new list of list with any NaN removed from it. Used so
        missing values are not used in calculations because they corrupt
        percentages calculated.
        """

        newData = []
        for student in data:
            currentStudentData = []
            for value in student:
                if value != 999:
                    currentStudentData.append(value)
            if currentStudentData:
                newData.append(currentStudentData)

        return newData
