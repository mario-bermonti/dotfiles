* General functions :noexport:UsefulScript:
#+BEGIN_SRC ipython :session  :exports both :results output
import tabulate
import pandas as pd
import numpy as np
from scipy import stats
import statsmodels
from statsmodels.stats.weightstats import DescrStatsW
from statsmodels.stats.weightstats import CompareMeans
from statsmodels.stats.weightstats import ttest_ind
from statsmodels.stats.multitest import multipletests
import statsmodels.api as sm
import seaborn as sns
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[286]:
:END:



This function formats df's as orgmode tables.
#+BEGIN_SRC ipython :session  :exports results :results output
  def format_as_table(data, showindex='always', series=False):
      """Returns an orgmode table."""
      if series:
          data.name = data.index[0]
          data = data.to_frame()
          showindex = False
      table = tabulate.tabulate(
          data,
          headers='keys',
          tablefmt='orgtbl',
          showindex=showindex
      )
      return table
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[287]:
:END:

This function formats .describe() results.
#+BEGIN_SRC ipython :session  :exports results :results output
  def format_descriptive_stats(data, toframe=False, transpose=False, reduce=False):
      """Formats the results of descriptive statistics conducted by
      the pandas' describe method into a format suitable for reporting
      in stats reports.
      """
      data_formatted = data.round(2)
      if toframe:
          data_formatted = data_formatted.to_frame()
      if transpose:
          data_formatted = data_formatted.transpose()
      # has to happen here so it SD gets the correct sentence case
      data_formatted.rename(columns=str.capitalize, inplace=True)
      data_formatted.rename(columns={'50%': 'Median', 'Std': 'SD'}, inplace=True)
      if reduce:
          data_formatted.drop(['Count', '25%', '75%'], axis=1)
      data_formatted = data_formatted[['Mean', 'Median', 'SD', 'Min', 'Max']]
      return data_formatted
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[288]:
:END:

This function formats the results of freq analysis (.value_counts()).
#+BEGIN_SRC ipython :session  :exports results :results output
  def freq_of_multiple_columns(data):
      """Conducts frequency analysis (value_counts) to each column of a
      pandas df and format it as a table sui
      table for statistical
      analysis reports.

      Parameters:
      -----------
      data: pandas df that may contain multiple columns. This contains the
            data that will be analyzed.

      Returns: a str that contains the results for all the columns.
      -------

      Notes:
      -----
      1. You need to print the return value of the function in order
         for it to appear in orgmode results.
      2. Uses tabulate for formatting the table.
      3. value_counts are normalized

      """
      results_formatted = ''
      for var in data:
          results = data[var].value_counts(normalize=True)
          results = results.round(4).to_frame() * 100
          na_count = data[var].isna().sum()
          # Doesn't work (it works with similar examples
          #results.loc['Missing values'] = na_count
          results.columns = results.columns.str.capitalize() + ' (%)'
          results = tabulate.tabulate(results, headers='keys', tablefmt='orgtbl', showindex='always')
          results_formatted += '{} \n #+begin_tablenotes \n Missing values: {} \n' \
              '#+end_tablenotes \n\n'.format(results, na_count)
      return results_formatted
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[289]:
:END:


#+BEGIN_SRC ipython :session  :exports results :results output
  def freq_of_multiple_columns1(data):
      """Conducts frequency analysis (value_counts) to each column of a
      pandas df and format it as a table suitable for statistical
      analysis reports.

      Parameters:
      -----------
      data: pandas df that may contain multiple columns. This contains the
            data that will be analyzed.

      Returns: a str that contains the results for all the columns.
      -------

      Notes:
      -----
      1. You need to print the return value of the function in order
         for it to appear in orgmodes results.
      2. Uses tabulate for formatting the table.
      3. value_counts are normalized

      """
      results_formatted = ''
      for var in data:
          results = data[var].value_counts(normalize=True)
          results = results.round(4).to_frame() * 100
          print(results.info())
          na_count = data[var].isna().sum()
          # Doesn't work (it works with similar examples
          #results.loc['d'] = na_count
          print('c', results.columns)
          if isinstance(results.index, pd.CategoricalIndex):
              print('i', results.index.categories)
          results.columns = results.columns.str.capitalize() + ' (%)'
          results = tabulate.tabulate(results, headers='keys', tablefmt='orgtbl', showindex='always')
          results_formatted += '{} \n #+begin_tablenotes \n Missing values: {} \n' \
              '#+end_tablenotes \n\n'.format(results, na_count)
      return results_formatted
  d = pd.DataFrame({'a':[1, 2, 3, 4, 5], 'b': [11, 12, 13, 14, 15]})
  print(freq_of_multiple_columns1(d))
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[290]:
# output
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 5 to 1
Data columns (total 1 columns):
a    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['a'], dtype='object')
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 15 to 11
Data columns (total 1 columns):
b    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['b'], dtype='object')
|----+---------|
|    |   A (%) |
|----+---------|
|  5 |      20 |
|  4 |      20 |
|  3 |      20 |
|  2 |      20 |
|  1 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes

|----+---------|
|    |   B (%) |
|----+---------|
| 15 |      20 |
| 14 |      20 |
| 13 |      20 |
| 12 |      20 |
| 11 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes



:END:

:RESULTS:
# Out[390]:
# output
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 5 to 1
Data columns (total 1 columns):
a    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['a'], dtype='object')
<class 'pandas.core.frame.DataFrame'>
Int64Index: 5 entries, 15 to 11
Data columns (total 1 columns):
b    5 non-null float64
dtypes: float64(1)
memory usage: 80.0 bytes
None
c Index(['b'], dtype='object')
|----+---------|
|    |   A (%) |
|----+---------|
|  5 |      20 |
|  4 |      20 |
|  3 |      20 |
|  2 |      20 |
|  1 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes

|----+---------|
|    |   B (%) |
|----+---------|
| 15 |      20 |
| 14 |      20 |
| 13 |      20 |
| 12 |      20 |
| 11 |      20 |
|----+---------|
 #+begin_tablenotes
 Missing values: 0
#+end_tablenotes



:END:

* Data preparation :noexport:
** General
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_dir = '../Data/18-03-2019/'
  fig_dir = '../Results/Figures/'
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[291]:
:END:
** Demo data


#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_demo_path = '{}Demo_bd_diabetes 18_marzo_19_PVG_REV.xlsx'.format(data_dir)
  data_demo_master = pd.read_excel(data_demo_path)
  data_demo_master.info(verbose=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[292]:
# output
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 49 entries, 0 to 48
Data columns (total 116 columns):
Code                                   int64
group                                  object
demo_ado1_age                          int64
demo_ado2_gender                       object
demo_ado3_school                       object
demo_ado4_grade                        object
demo_ado5_attention                    object
demo_ado5_control                      object
demo_ado5_think                        object
demo_ado5_organized                    object
demo_ado5_motivation                   object
demo_ado5_strategies                   object
demo_ado5_evaluation                   object
demo_ado5_remember                     object
demo_ado5_problemsolving               object
demo_ado6_people                       object
demo_ado6_radio                        object
demo_ado6_television                   object
demo_ado6_newspaper                    object
demo_ado6_magazines                    object
demo_ado6_internet                     object
demo_ado6_family                       object
demo_ado6_camps                        object
demo_ado6_conferences                  object
demo_ado6_supportgroups                object
demo_ado6_organizations                object
demo_ado6_professional                 object
demo_ado6_professional_description     object
demo_ado6_other                        object
demo_ado7_foodintake                   object
demo_ado7_other                        object
demo_ado8_vegetable                    object
demo_ado8_other                        object
demo_ado9_fruits                       object
demo_ado9_other                        float64
demo_ado10_fastfood                    object
demo_ado10_other                       object
demo_ado11_excersise                   object
demo_ado11_other                       object
demo_ado12_smoking                     object
demo_ado13_alcohol                     object
demo_ado14_perception1                 object
demo_ado15_perception2                 object
demo_ado16_perception3                 object
demo_ado16_description                 object
demo_pad1_age                          int64
demo_pad2_gender                       object
demo_pad2_other                        float64
demo_pad3_residence                    object
demo_pad4_education                    object
demo_pad4_other                        object
demo_pad5_income                       object
demo_pad6_medplan                      object
demo_pad7_medpayment                   object
demo_pad7_other                        object
demo_pad8_plancoverage                 object
demo_pad8_other                        object
demo_pad9_asthma                       object
demo_pad9_T1D                          object
demo_pad9_T2D                          object
demo_pad9_hypertension                 object
demo_pad9_cardiovascular               object
demo_pad9_cancer                       object
demo_pad9_overweight                   object
demo_pad9_none                         object
demo_pad9_other                        object
demo_pad10_people                      object
demo_pad10_radio                       object
demo_pad10_television                  object
demo_pad10_newspaper                   object
demo_pad10_magazines                   object
demo_pad10_internet                    object
demo_pad10_family                      object
demo_pad10_camps                       object
demo_pad10_conferences                 object
demo_pad10_supportgroups               object
demo_pad10_organizations               object
demo_pad10_professionals               object
demo_pad10_professional_description    object
demo_pad10_other                       object
demo_pad11_talktherapy                 object
demo_pad11_occupationaltherapy         object
demo_pad11_tutoring                    object
demo_pad11_psytherapy                  object
demo_pad11_other                       float64
demo_pad12_talktherapy                 object
demo_pad12_occutherapy                 object
demo_pad12_tutoring                    object
demo_pad12_psytherapy                  object
demo_pad12_other                       float64
demo_pad13_psy                         object
demo_pad13_neuro                       object
demo_pad13_behavior                    object
demo_pad14                             object
demo_pad14_graderepeated               float64
demo_pad14_description                 float64
demo_pad15_asthma                      object
demo_pad15_T1D                         object
demo_pad15_T2D                         object
demo_pad15_hypertension                object
demo_pad15_cardiovascular              object
demo_pad15_cancer                      object
demo_pad15_overweight                  object
demo_pad15_none                        object
demo_pad15_other                       object
demo_pad16_ageofdiagnosis              int64
demo_pad17_timewithdiabetes            object
demo_pad18_hyperglicemicep             object
demo_pad18_frequency                   object
demo_pad18_mostrecent                  object
demo_pad19_hypoglocemicep              object
demo_pad19_frequency                   object
demo_pad19_mostrecent                  object
demo_pad20_treatment                   object
demo_pad20_other                       object
Hb1c                                   object
dtypes: float64(6), int64(4), object(106)
memory usage: 44.5+ KB

:END:


Clean missing data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_demo_master.replace([999, '#NULL!'], np.nan, inplace=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[293]:
:END:

#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_demo_relevant = data_demo_master[
      ['Code',
       'group',
       'Hb1c',
       'demo_pad16_ageofdiagnosis']]
  data_demo_relevant.head()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[294]:
# text/plain
:    Code     group  Hb1c  demo_pad16_ageofdiagnosis
: 0     1  Diabetes   7.0                          2
: 1     2  Diabetes   6.6                         10
: 2     3  Diabetes   8.1                          8
: 3     4  Diabetes   5.6                         11
: 4     5  Diabetes   NaN                         11
:END:

** Cognitive data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_cog_path = '{}Cog_bd_diabetes 7_marzo_19_CDC_RR_PVG_REV.xlsx'.format(data_dir)
  data_cog_master = pd.read_excel(data_cog_path)
  data_cog_master.info(verbose=True)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[295]:
# output
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 49 entries, 0 to 48
Data columns (total 53 columns):
Code                    49 non-null int64
Group                   49 non-null object
cefi_plan_ado           49 non-null int64
cefi_att_ado            49 non-null int64
cefi_er_ado             49 non-null int64
cefi_flex_ado           49 non-null int64
cefi_ini_ado            49 non-null object
cefi_ic_ado             49 non-null int64
cefi_orga_ado           49 non-null int64
cefi_wm_ado             49 non-null int64
cefi_sm_ado             49 non-null int64
cefi_fs_ado             49 non-null int64
cefi_ci1_ado            49 non-null int64
cefi_ci2_ado            49 non-null object
cefi_nis1_ado           49 non-null int64
cefi_nis2_ado           49 non-null object
cefi_pis1_ado           49 non-null int64
cefi_pis2_ado           49 non-null object
cefi_noi1_ado           49 non-null int64
cefi_noi2_ado           49 non-null object
cas2_pca_ado            49 non-null int64
cas2_pcb_ado            49 non-null int64
cas2_mat_ado            49 non-null int64
cas2_vsr_ado            49 non-null int64
cas2_ea_ado             49 non-null int64
cas2_nd_ado             49 non-null int64
cas2_ws_ado             49 non-null int64
cas2_sr_ado             49 non-null int64
cas2_plan_ado           49 non-null int64
cas2_sim_ado            49 non-null int64
cas2_att_ado            49 non-null int64
cas2_succ_ado           49 non-null int64
cas2_fs_ado             49 non-null int64
cas2_description_ado    49 non-null object
cefi_plan_pad           49 non-null int64
cefi_att_pad            49 non-null int64
cefi_er_pad             49 non-null int64
cefi_flex_pad           49 non-null int64
cefi_ini_pad            49 non-null int64
cefi_ic_pad             49 non-null int64
cefi_org_pad            49 non-null int64
cefi_wm_pad             49 non-null int64
cefi_sm_pad             49 non-null int64
cefi_fs_pad             49 non-null int64
cefi_ci1_pad            49 non-null object
cefi_ci2_pad            49 non-null object
cefi_nis1_pad           49 non-null int64
cefi_nis2_pad           49 non-null object
cefi_pis1_pad           49 non-null int64
cefi_pis2_pad           49 non-null object
cefi_noi1_pad           49 non-null int64
cefi_noi2_pad           49 non-null object
filter_$                49 non-null object
dtypes: int64(40), object(13)
memory usage: 20.4+ KB

:END:

Clean missing data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_cog_master.replace(999, np.nan, inplace=True)
data_cog_master.head()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[296]:
# text/plain
:    Code     Group  cefi_plan_ado  cefi_att_ado  cefi_er_ado  cefi_flex_ado  \
: 0     1  Diabetes            104           107           89            108
: 1     2  Diabetes            124           131          103            129
: 2     3  Diabetes            112           109          103            103
: 3     4  Diabetes             87            92          101            120
: 4     5  Diabetes            104           116           87            108
:
:   cefi_ini_ado  cefi_ic_ado  cefi_orga_ado  cefi_wm_ado  ...  cefi_fs_pad  \
: 0           99          100            103          104  ...        129.0
: 1          105          124            111           93  ...         95.0
: 2          117          117            109          110  ...        101.0
: 3          101          100             88          104  ...        102.0
: 4           96          107            107          106  ...         92.0
:
:    cefi_ci1_pad                                       cefi_ci2_pad  \
: 0           110      Inconsistent response style is not indicated.
: 1            50          Inconsistent response style is indicated.
: 2           NaN  The consistency index score could not be calcu...
: 3           110      Inconsistent response style is not indicated.
: 4           110  The consistency index score could not be calcu...
:
:   cefi_nis1_pad                                      cefi_nis2_pad  \
: 0         122.0  Negative impression response style is not indi...
: 1          67.0   Negative impression response style is indicated.
: 2           0.0  Negative impression response style is not indi...
: 3          94.0  Negative impression response style is not indi...
: 4          85.0  Negative impression response style is not indi...
:
:   cefi_pis1_pad                                cefi_pis2_pad cefi_noi1_pad  \
: 0          78.0  Positive impression style is not indicated.           0.0
: 1         130.0  Positive impression style is not indicated.           0.0
: 2         106.0  Positive impression style is not indicated.           3.0
: 3         106.0  Positive impression style is not indicated.           0.0
: 4         115.0  Positive impression style is not indicated.           0.0
:
:                         cefi_noi2_pad      filter_$
: 0     None of the items were omitted.  Not Selected
: 1     None of the items were omitted.  Not Selected
: 2  The rater omitted 3% of the items.  Not Selected
: 3     None of the items were omitted.  Not Selected
: 4     None of the items were omitted.  Not Selected
:
: [5 rows x 53 columns]
:END:


#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_cog_relevant = data_cog_master[
        ['Code',
         'cas2_att_ado',
         'cas2_plan_ado',
         'cas2_sim_ado',
         'cas2_succ_ado']
         ]
  data_cog_relevant.head()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[297]:
# text/plain
:    Code  cas2_att_ado  cas2_plan_ado  cas2_sim_ado  cas2_succ_ado
: 0     1          70.0           82.0         108.0           91.0
: 1     2          67.0           88.0          80.0           91.0
: 2     3          73.0           68.0          82.0           85.0
: 3     4          73.0           91.0          96.0           79.0
: 4     5         100.0           82.0         110.0          106.0
:END:

* Group comparisons (objective 1)
** Notes
There are differences between the results of Mann-Whitnes and t tests.
** Assumptions
These are in SPSS format.
** Group comparisons
*** Group comparisons preparation :noexport:
Get only necessary data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_group_comp = data_cog_master[
      ['Code',
       'Group',
       'cas2_att_ado',
       'cas2_plan_ado',
       'cas2_sim_ado',
       'cas2_succ_ado'
       ]
  ]
  data_group_comp.info()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[298]:
# output
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 49 entries, 0 to 48
Data columns (total 6 columns):
Code             49 non-null int64
Group            49 non-null object
cas2_att_ado     48 non-null float64
cas2_plan_ado    47 non-null float64
cas2_sim_ado     48 non-null float64
cas2_succ_ado    48 non-null float64
dtypes: float64(4), int64(1), object(1)
memory usage: 2.4+ KB

:END:

Organize data by variable (ie, process with all groups).
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  # get data for each group
  data_att = data_group_comp.loc[:,
                                 ['Code', 'Group', 'cas2_att_ado']]
  data_plan = data_group_comp.loc[:,
                                 ['Code', 'Group', 'cas2_plan_ado']]
  data_sim = data_group_comp.loc[:,
                                 ['Code', 'Group', 'cas2_sim_ado']]
  data_succ = data_group_comp.loc[:,
                                 ['Code', 'Group', 'cas2_succ_ado']]
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[299]:
:END:

*** Descriptive stats
**** Tables
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_group_comp_cog = data_group_comp.loc[:,
                                            'Group':
                                            'cas2_succ_ado']
  data_group_comp_bygroup = data_group_comp_cog.groupby('Group')
  data_group_comp_bygroup.describe().transpose().round(2)
  #+END_SRC

#+RESULTS:
:RESULTS:
# Out[300]:
# text/plain
: Group                Control  Diabetes
: cas2_att_ado  count    20.00     28.00
:               mean     89.45     86.82
:               std      18.13     13.67
:               min      61.00     61.00
:               25%      78.25     75.25
:               50%      89.50     94.00
:               75%     100.00     97.75
:               max     129.00    106.00
: cas2_plan_ado count    20.00     27.00
:               mean     89.95     84.19
:               std      14.94     10.83
:               min      61.00     61.00
:               25%      81.25     77.00
:               50%      94.00     82.00
:               75%      97.00     91.00
:               max     119.00    105.00
: cas2_sim_ado  count    20.00     28.00
:               mean     96.90     90.39
:               std      13.67     11.32
:               min      74.00     63.00
:               25%      84.25     82.00
:               50%      97.00     91.00
:               75%     105.75    100.00
:               max     124.00    113.00
: cas2_succ_ado count    20.00     28.00
:               mean     99.25     94.71
:               std      12.38      9.95
:               min      66.00     73.00
:               25%      91.00     91.00
:               50%     101.50     94.00
:               75%     106.75    100.75
:               max     123.00    114.00
:END:

Confidence intervals
#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
  # get att data
  data_att_diabetes = data_att.loc[data_att['Group'] == 'Diabetes',
                                  'cas2_att_ado']
  data_att_control = data_att.loc[data_att['Group'] == 'Control',
                                  'cas2_att_ado']

  # get plan data
  data_plan_diabetes = data_plan.loc[data_plan['Group'] == 'Diabetes',
                                  'cas2_plan_ado']
  data_plan_control = data_plan.loc[data_plan['Group'] == 'Control',
                                  'cas2_plan_ado']

  # get sim data
  data_sim_diabetes = data_sim.loc[data_sim['Group'] == 'Diabetes',
                                  'cas2_sim_ado']
  data_sim_control = data_sim.loc[data_sim['Group'] == 'Control',
                                  'cas2_sim_ado']

  # get succ data
  data_succ_diabetes = data_succ.loc[data_succ['Group'] == 'Diabetes',
                                  'cas2_succ_ado']
  data_succ_control = data_succ.loc[data_succ['Group'] == 'Control',
                                  'cas2_succ_ado']

  # CI for att/diab
  ci_object_att_diabetes = DescrStatsW(data_att_diabetes.dropna(how='all'))
  ci_att_diabetes = ci_object_att_diabetes.tconfint_mean()

  # CI for att/cont
  ci_object_att_control = DescrStatsW(data_att_control.dropna(how='all'))
  ci_att_control = ci_object_att_control.tconfint_mean()

  # CI for plan/diab
  ci_object_plan_diabetes = DescrStatsW(data_plan_diabetes.dropna(how='all'))
  ci_plan_diabetes = ci_object_plan_diabetes.tconfint_mean()

  # CI for att/cont
  ci_object_plan_control = DescrStatsW(data_plan_control.dropna(how='all'))
  ci_plan_control = ci_object_plan_control.tconfint_mean()

  # CI for sim/diab
  ci_object_sim_diabetes = DescrStatsW(data_sim_diabetes.dropna(how='all'))
  ci_sim_diabetes = ci_object_sim_diabetes.tconfint_mean()

  # CI for att/cont
  ci_object_sim_control = DescrStatsW(data_sim_control.dropna(how='all'))
  ci_sim_control = ci_object_sim_control.tconfint_mean()

  # CI for succ/diab
  ci_object_succ_diabetes = DescrStatsW(data_succ_diabetes.dropna(how='all'))
  ci_succ_diabetes = ci_object_succ_diabetes.tconfint_mean()

  # CI for att/cont
  ci_object_succ_control = DescrStatsW(data_succ_control.dropna(how='all'))
  ci_succ_control = ci_object_succ_control.tconfint_mean()

  print('CI att control: ', ci_att_control)
  print('CI att diabetes: ', ci_att_diabetes)
  print()
  print('CI plan control: ', ci_plan_control)
  print('CI plan diabetes: ', ci_plan_diabetes)
  print()
  print('CI sim control: ', ci_sim_control)
  print('CI sim diabetes: ', ci_sim_diabetes)
  print()
  print('CI succ control: ', ci_succ_control)
  print('CI succ diabetes: ', ci_succ_diabetes)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[301]:
# output
CI att control:  (80.96373799192098, 97.93626200807903)
CI att diabetes:  (81.520416163921, 92.12244097893614)

CI plan control:  (82.9561489587604, 96.94385104123961)
CI plan diabetes:  (79.90198962746142, 88.46838074290896)

CI sim control:  (90.50288196923212, 103.29711803076789)
CI sim diabetes:  (86.00415922531485, 94.78155506039943)

CI succ control:  (93.4542644043384, 105.0457355956616)
CI succ diabetes:  (90.85705520442373, 98.57151622414769)

:END:

**** Figures
***** Attention
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_att = sns.boxplot(x='Group', y='cas2_att_ado', data=data_att)

  boxplot_att_fig = boxplot_att.get_figure()
  boxplot_att_fig_path = '{}boxplot_att_bygroup.jpg'.format(fig_dir)
  boxplot_att_fig.savefig(boxplot_att_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[302]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-BsUXRp.png]]
:END:


***** Planning
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_plan = sns.boxplot(x='Group', y='cas2_plan_ado', data=data_plan)
  boxplot_plan_fig = boxplot_plan.get_figure()
  boxplot_plan_fig_path = '{}boxplot_plan_bygroup.jpg'.format(fig_dir)
  boxplot_plan_fig.savefig(boxplot_plan_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[303]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-BldYzC.png]]
:END:


***** Simultaneous
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_sim = sns.boxplot(x='Group', y='cas2_sim_ado', data=data_sim)
  boxplot_sim_fig = boxplot_sim.get_figure()
  boxplot_sim_fig_path = '{}boxplot_sim_bygroup.jpg'.format(fig_dir)
  boxplot_sim_fig.savefig(boxplot_sim_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[304]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-E9AkLt.png]]
:END:


***** Successive
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_succ = sns.boxplot(x='Group', y='cas2_succ_ado', data=data_succ)
  boxplot_succ_fig = boxplot_succ.get_figure()
  boxplot_succ_fig_path = '{}boxplot_succ_bygroup.jpg'.format(fig_dir)
  boxplot_succ_fig.savefig(boxplot_succ_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[305]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-3LtWdR.png]]
:END:

*** Group comparisons
**** Attention

#+BEGIN_SRC ipython  :session  :exports results :results output :display text/plain
  # get data
  data_att_control = data_att.loc[data_att['Group'] == 'Control', 'cas2_att_ado']
  data_att_diabetes = data_att.loc[data_att['Group'] == 'Diabetes', 'cas2_att_ado']

  descr_obj_att_control = DescrStatsW(data_att_control.dropna(how='all'))
  descr_obj_att_diabetes = DescrStatsW(data_att_diabetes.dropna(how='all'))
  compare_means_att = CompareMeans(descr_obj_att_control,
                                   descr_obj_att_diabetes)

  results_att_comp = compare_means_att.summary(usevar='unequal')
  print(results_att_comp)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[306]:
# output
                          Test for equality of means
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
subset #1      2.6286      4.808      0.547      0.588      -7.146      12.403
==============================================================================

:END:

#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
stats.mannwhitneyu(data_att_control, data_att_diabetes)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[307]:
# text/plain
: MannwhitneyuResult(statistic=256.5, pvalue=0.226655059160439)
:END:


**** Planning
#+BEGIN_SRC ipython  :session  :exports results :results output :display text/plain
  # get data
  data_plan_control = data_plan.loc[data_plan['Group'] == 'Control',
                                    'cas2_plan_ado']
  data_plan_diabetes = data_plan.loc[data_plan['Group'] == 'Diabetes',
                                     'cas2_plan_ado']

  descr_obj_plan_control = DescrStatsW(data_plan_control.dropna(how='all'))
  descr_obj_plan_diabetes = DescrStatsW(data_plan_diabetes.dropna(how='all'))
  compare_means_plan = CompareMeans(descr_obj_plan_control,
                                   descr_obj_plan_diabetes)

  results_plan_comp = compare_means_plan.summary(usevar='unequal')
  print(results_plan_comp)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[308]:
# output
                          Test for equality of means
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
subset #1      5.7648      3.938      1.464      0.153      -2.247      13.777
==============================================================================

:END:

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
stats.mannwhitneyu(data_plan_control, data_plan_diabetes)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[309]:
# text/plain
: MannwhitneyuResult(statistic=213.5, pvalue=0.052311815567260174)
:END:


**** Simultaneous
#+BEGIN_SRC ipython  :session  :exports results :results output :display text/plain
  # get data
  data_sim_control = data_sim.loc[data_sim['Group'] == 'Control',
                                    'cas2_sim_ado']
  data_sim_diabetes = data_sim.loc[data_sim['Group'] == 'Diabetes',
                                     'cas2_sim_ado']

  descr_obj_sim_control = DescrStatsW(data_sim_control.dropna(how='all'))
  descr_obj_sim_diabetes = DescrStatsW(data_sim_diabetes.dropna(how='all'))
  compare_means_sim = CompareMeans(descr_obj_sim_control,
                                   descr_obj_sim_diabetes)

  results_sim_comp = compare_means_sim.summary(usevar='unequal')
  print(results_sim_comp)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[310]:
# output
                          Test for equality of means
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
subset #1      6.5071      3.730      1.744      0.090      -1.058      14.072
==============================================================================

:END:

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
stats.mannwhitneyu(data_sim_control, data_sim_diabetes)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[311]:
# text/plain
: MannwhitneyuResult(statistic=208.0, pvalue=0.04148989434460321)
:END:

**** Succning
#+BEGIN_SRC ipython  :session  :exports results :results output :display text/plain
  # get data
  data_succ_control = data_succ.loc[data_succ['Group'] == 'Control',
                                    'cas2_succ_ado']
  data_succ_diabetes = data_succ.loc[data_succ['Group'] == 'Diabetes',
                                     'cas2_succ_ado']

  descr_obj_succ_control = DescrStatsW(data_succ_control.dropna(how='all'))
  descr_obj_succ_diabetes = DescrStatsW(data_succ_diabetes.dropna(how='all'))
  compare_means_succ = CompareMeans(descr_obj_succ_control,
                                   descr_obj_succ_diabetes)

  results_succ_comp = compare_means_succ.summary(usevar='unequal')
  print(results_succ_comp)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[312]:
# output
                          Test for equality of means
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
subset #1      4.5357      3.347      1.355      0.184      -2.257      11.328
==============================================================================

:END:

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
stats.mannwhitneyu(data_succ_control, data_succ_diabetes)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[313]:
# text/plain
: MannwhitneyuResult(statistic=210.0, pvalue=0.04480010320029753)
:END:

*** Multiple comparisons corrections
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  results_comp_pvalues = [float(results_att_comp.data[1][4]),
                          float(results_plan_comp.data[1][4]),
                          float(results_sim_comp.data[1][4]),
                          float(results_succ_comp.data[1][4])]
  results_comp_pvalues_cor = multipletests(results_comp_pvalues)
  for res in results_comp_pvalues_cor:
      print(res)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[314]:
# output
[False False False False]
[0.588      0.39235458 0.31425039 0.39235458]
0.012741455098566168
0.0125

:END:

Corrected pvalues for group comparisons:
Attention: src_ipython[:session]{round(results_comp_pvalues_cor[1][0], 2)} {{{results(0.59)}}}
Planning: src_ipython[:session]{round(results_comp_pvalues_cor[1][1], 2)} {{{results(0.39)}}}
Simulteanous: src_ipython[:session]{round(results_comp_pvalues_cor[1][2], 2)} {{{results(0.31)}}}
Successive: src_ipython[:session]{round(results_comp_pvalues_cor[1][3], 2)} {{{results(0.39)}}}

* Regression analysis (objective 2)
** Regression analysis preparation
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_reg = data_demo_relevant.copy()
  data_reg = pd.merge(data_reg,
           data_cog_relevant,
           how='outer',
           on='Code')
  data_reg = data_reg.loc[data_reg['group'] == 'Diabetes', :]

  data_reg.info()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[319]:
# output
<class 'pandas.core.frame.DataFrame'>
Int64Index: 28 entries, 0 to 27
Data columns (total 8 columns):
Code                         28 non-null int64
group                        28 non-null object
Hb1c                         24 non-null float64
demo_pad16_ageofdiagnosis    28 non-null int64
cas2_att_ado                 28 non-null float64
cas2_plan_ado                27 non-null float64
cas2_sim_ado                 28 non-null float64
cas2_succ_ado                28 non-null float64
dtypes: float64(5), int64(2), object(1)
memory usage: 2.0+ KB

:END:

** Assumptions
*** Predictor: Hb1c
The boxplot below shows that there are 3 outliers.
***** Hb1c boxplot
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_h1bc = sns.boxplot(y='Hb1c',
  data=data_reg)
  boxplot_h1bc_fig = boxplot_h1bc.get_figure()
  boxplot_h1bc_fig_path = '{}boxplot_h1bc_bygroup.jpg'.format(fig_dir)
  boxplot_h1bc_fig.savefig(boxplot_h1bc_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[320]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-FbckFA.png]]
:END:

***** Scatterdots
****** Attention
#+BEGIN_SRC ipython :session  :export results :display image/png
  fig_scatter_hb1c_att = sns.regplot(x='Hb1c',
              y='cas2_att_ado',
              data=data_reg)
  fig_scatter_hb1c_att = fig_scatter_hb1c_att.get_figure()
  fig_path = '{}scatterdot_hb1c_att.jpg'.format(fig_dir)
  fig_scatter_hb1c_att.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[321]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-ciNX3i.png]]
:END:

****** Planning
#+BEGIN_SRC ipython :session  :exports results :display image/png
  fig_scatter_hb1c_plan = sns.regplot(x='Hb1c',
              y='cas2_plan_ado',
              data=data_reg)
  fig_scatter_hb1c_plan = fig_scatter_hb1c_plan.get_figure()
  fig_path = '{}scatterdot_hb1c_plan.jpg'.format(fig_dir)
  fig_scatter_hb1c_plan.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[322]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-RbEnXH.png]]
:END:

****** Simultaneous
#+BEGIN_SRC ipython :session  :exports results :display image/png
  fig_scatter_hb1c_sim = sns.regplot(x='Hb1c',
              y='cas2_sim_ado',
              data=data_reg)
  fig_scatter_hb1c_sim = fig_scatter_hb1c_sim.get_figure()
  fig_path = '{}scatterdot_hb1c_sim.jpg'.format(fig_dir)
  fig_scatter_hb1c_sim.savefig(fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[323]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-4r4PXL.png]]
:END:

****** Successive
#+BEGIN_SRC ipython :session  :exports results :display image/png
  fig_scatter_hb1c_succ = sns.regplot(x='Hb1c',
              y='cas2_succ_ado',
              data=data_reg)
  fig_scatter_hb1c_succ = fig_scatter_hb1c_succ.get_figure()
  fig_path = '{}scatterdot_hb1c_succ.jpg'.format(fig_dir)
  fig_scatter_hb1c_succ.savefig(fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[324]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-l3CfpA.png]]
:END:

*** Predictor: Age of onset
The boxplot below shows that there are 3 outliers.
***** Age of onset boxplot
#+BEGIN_SRC ipython :session  :exports results :display image/png
  boxplot_ageofonset = sns.boxplot(y='demo_pad16_ageofdiagnosis',
  data=data_reg)
  boxplot_ageofonset_fig = boxplot_ageofonset.get_figure()
  boxplot_ageofonset_fig_path = '{}boxplot_ageofonset.jpg'.format(fig_dir)
  boxplot_ageofonset_fig.savefig(boxplot_ageofonset_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[325]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-yVLAF1.png]]
:END:

***** Scatterdots
****** Attention
#+BEGIN_SRC ipython :session  :export results :display image/png
  fig_scatter_hb1c_att = sns.regplot(x='demo_pad16_ageofdiagnosis',
              y='cas2_att_ado',
              data=data_reg)
  fig_scatter_hb1c_att = fig_scatter_hb1c_att.get_figure()
  fig_path = '{}scatterdot_ageofonset_att.jpg'.format(fig_dir)
  fig_scatter_hb1c_att.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[326]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-dbiz1l.png]]
:END:

****** Planning
#+BEGIN_SRC ipython :session  :export results :display image/png
  fig_scatter_hb1c_plan = sns.regplot(x='demo_pad16_ageofdiagnosis',
              y='cas2_plan_ado',
              data=data_reg)
  fig_scatter_hb1c_plan = fig_scatter_hb1c_plan.get_figure()
  fig_path = '{}scatterdot_ageofonset_plan.jpg'.format(fig_dir)
  fig_scatter_hb1c_plan.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[327]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-dvTzID.png]]
:END:

****** Simultaneous
#+BEGIN_SRC ipython :session  :export results :display image/png
  fig_scatter_hb1c_sim = sns.regplot(x='demo_pad16_ageofdiagnosis',
              y='cas2_sim_ado',
              data=data_reg)
  fig_scatter_hb1c_sim = fig_scatter_hb1c_sim.get_figure()
  fig_path = '{}scatterdot_ageofonset_sim.jpg'.format(fig_dir)
  fig_scatter_hb1c_sim.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[328]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-xuZTvz.png]]
:END:

****** Succultaneous
#+BEGIN_SRC ipython :session  :export results :display image/png
  fig_scatter_hb1c_succ = sns.regplot(x='demo_pad16_ageofdiagnosis',
              y='cas2_succ_ado',
              data=data_reg)
  fig_scatter_hb1c_succ = fig_scatter_hb1c_succ.get_figure()
  fig_path = '{}scatterdot_ageofonset_succ.jpg'.format(fig_dir)
  fig_scatter_hb1c_succ.savefig(fig_path)

#+END_SRC

#+RESULTS:
:RESULTS:
# Out[329]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-Cv6HJg.png]]
:END:

** Descriptive stats
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg.describe().transpose().round(2).drop('Code')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[330]:
# text/plain
:                            count   mean    std   min    25%   50%     75%  \
: Hb1c                        24.0   8.02   1.87   5.6   6.88   7.7    8.25
: demo_pad16_ageofdiagnosis   28.0   8.71   3.80   1.0   6.75   9.5   11.00
: cas2_att_ado                28.0  86.82  13.67  61.0  75.25  94.0   97.75
: cas2_plan_ado               27.0  84.19  10.83  61.0  77.00  82.0   91.00
: cas2_sim_ado                28.0  90.39  11.32  63.0  82.00  91.0  100.00
: cas2_succ_ado               28.0  94.71   9.95  73.0  91.00  94.0  100.75
:
:                              max
: Hb1c                        12.0
: demo_pad16_ageofdiagnosis   15.0
: cas2_att_ado               106.0
: cas2_plan_ado              105.0
: cas2_sim_ado               113.0
: cas2_succ_ado              114.0
:END:

** Regression model: Hb1c
*** Attention
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['Hb1c', 'cas2_att_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[331]:
# text/plain
:                   Hb1c  cas2_att_ado
: Hb1c          1.000000      0.520097
: cas2_att_ado  0.520097      1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  hb1c_model_x = sm.add_constant(data_reg['Hb1c'])
  hb1c_model_y = data_reg['cas2_att_ado']
  model_hb1c = sm.OLS(hb1c_model_y,
         hb1c_model_x,
         missing='drop')
  results_hb1c = model_hb1c.fit()
  results_hb1c.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[332]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:           cas2_att_ado   R-squared:                       0.271
: Model:                            OLS   Adj. R-squared:                  0.237
: Method:                 Least Squares   F-statistic:                     8.158
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):            0.00918
: Time:                        08:25:38   Log-Likelihood:                -91.430
: No. Observations:                  24   AIC:                             186.9
: Df Residuals:                      22   BIC:                             189.2
: Df Model:                           1
: Covariance Type:            nonrobust
: ==============================================================================
:                  coef    std err          t      P>|t|      [0.025      0.975]
: ------------------------------------------------------------------------------
: const         57.1671     10.488      5.451      0.000      35.416      78.918
: Hb1c           3.6408      1.275      2.856      0.009       0.997       6.284
: ==============================================================================
: Omnibus:                        0.719   Durbin-Watson:                   1.662
: Prob(Omnibus):                  0.698   Jarque-Bera (JB):                0.682
: Skew:                          -0.060   Prob(JB):                        0.711
: Kurtosis:                       2.183   Cond. No.                         37.6
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

**** Outliers removed
This model doesn't fit the data well at all.
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  hb1c_model_x = sm.add_constant(data_reg_h_low['Hb1c'])
  hb1c_model_y = data_reg_h_low['cas2_att_ado']
  model_hb1c = sm.OLS(hb1c_model_y,
         hb1c_model_x,
         missing='drop')
  results_hb1c = model_hb1c.fit()
  results_hb1c.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[333]:
# output

NameErrorTraceback (most recent call last)
<ipython-input-333-a7579f168dd7> in <module>()
----> 1 hb1c_model_x = sm.add_constant(data_reg_h_low['Hb1c'])
      2 hb1c_model_y = data_reg_h_low['cas2_att_ado']
      3 model_hb1c = sm.OLS(hb1c_model_y,
      4        hb1c_model_x,
      5        missing='drop')

NameError: name 'data_reg_h_low' is not defined
:END:

*** Planning
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['Hb1c', 'cas2_plan_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[334]:
# text/plain
:                    Hb1c  cas2_plan_ado
: Hb1c           1.000000       0.147555
: cas2_plan_ado  0.147555       1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  hb1c_model_x = sm.add_constant(data_reg['Hb1c'])
  hb1c_model_y = data_reg['cas2_plan_ado']
  model_hb1c = sm.OLS(hb1c_model_y,
         hb1c_model_x,
         missing='drop')
  results_hb1c = model_hb1c.fit()
  results_hb1c.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[335]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:          cas2_plan_ado   R-squared:                       0.022
: Model:                            OLS   Adj. R-squared:                 -0.025
: Method:                 Least Squares   F-statistic:                    0.4674
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.502
: Time:                        08:25:40   Log-Likelihood:                -86.045
: No. Observations:                  23   AIC:                             176.1
: Df Residuals:                      21   BIC:                             178.4
: Df Model:                           1
: Covariance Type:            nonrobust
: ==============================================================================
:                  coef    std err          t      P>|t|      [0.025      0.975]
: ------------------------------------------------------------------------------
: const         78.4226      9.813      7.992      0.000      58.016      98.830
: Hb1c           0.8161      1.194      0.684      0.502      -1.666       3.299
: ==============================================================================
: Omnibus:                        0.121   Durbin-Watson:                   1.893
: Prob(Omnibus):                  0.941   Jarque-Bera (JB):                0.344
: Skew:                           0.000   Prob(JB):                        0.842
: Kurtosis:                       2.401   Cond. No.                         36.8
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

*** Simultaneous
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['Hb1c', 'cas2_sim_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[336]:
# text/plain
:                   Hb1c  cas2_sim_ado
: Hb1c          1.000000     -0.145415
: cas2_sim_ado -0.145415      1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  hb1c_model_x = sm.add_constant(data_reg['Hb1c'])
  hb1c_model_y = data_reg['cas2_sim_ado']
  model_hb1c = sm.OLS(hb1c_model_y,
         hb1c_model_x,
         missing='drop')
  results_hb1c = model_hb1c.fit()
  results_hb1c.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[337]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:           cas2_sim_ado   R-squared:                       0.021
: Model:                            OLS   Adj. R-squared:                 -0.023
: Method:                 Least Squares   F-statistic:                    0.4753
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.498
: Time:                        08:25:41   Log-Likelihood:                -90.623
: No. Observations:                  24   AIC:                             185.2
: Df Residuals:                      22   BIC:                             187.6
: Df Model:                           1
: Covariance Type:            nonrobust
: ==============================================================================
:                  coef    std err          t      P>|t|      [0.025      0.975]
: ------------------------------------------------------------------------------
: const         97.3999     10.141      9.605      0.000      76.369     118.431
: Hb1c          -0.8497      1.233     -0.689      0.498      -3.406       1.706
: ==============================================================================
: Omnibus:                        2.114   Durbin-Watson:                   1.909
: Prob(Omnibus):                  0.348   Jarque-Bera (JB):                0.929
: Skew:                          -0.434   Prob(JB):                        0.628
: Kurtosis:                       3.419   Cond. No.                         37.6
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

*** Successive
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['Hb1c', 'cas2_succ_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[338]:
# text/plain
:                    Hb1c  cas2_succ_ado
: Hb1c           1.000000       0.113102
: cas2_succ_ado  0.113102       1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  hb1c_model_x = sm.add_constant(data_reg['Hb1c'])
  hb1c_model_y = data_reg['cas2_succ_ado']
  model_hb1c = sm.OLS(hb1c_model_y,
         hb1c_model_x,
         missing='drop')
  results_hb1c = model_hb1c.fit()
  results_hb1c.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[339]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:          cas2_succ_ado   R-squared:                       0.013
: Model:                            OLS   Adj. R-squared:                 -0.032
: Method:                 Least Squares   F-statistic:                    0.2851
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.599
: Time:                        08:25:42   Log-Likelihood:                -87.661
: No. Observations:                  24   AIC:                             179.3
: Df Residuals:                      22   BIC:                             181.7
: Df Model:                           1
: Covariance Type:            nonrobust
: ==============================================================================
:                  coef    std err          t      P>|t|      [0.025      0.975]
: ------------------------------------------------------------------------------
: const         90.4169      8.964     10.087      0.000      71.827     109.006
: Hb1c           0.5817      1.089      0.534      0.599      -1.678       2.841
: ==============================================================================
: Omnibus:                        0.214   Durbin-Watson:                   1.510
: Prob(Omnibus):                  0.898   Jarque-Bera (JB):                0.007
: Skew:                           0.018   Prob(JB):                        0.996
: Kurtosis:                       2.922   Cond. No.                         37.6
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

** Regression model: Age of onset
*** Attention
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['demo_pad16_ageofdiagnosis', 'cas2_att_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[340]:
# text/plain
:                            demo_pad16_ageofdiagnosis  cas2_att_ado
: demo_pad16_ageofdiagnosis                    1.00000       0.01253
: cas2_att_ado                                 0.01253       1.00000
:END:
**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  demo_pad16_ageofdiagnosis_model_x = sm.add_constant(data_reg['demo_pad16_ageofdiagnosis'])
  demo_pad16_ageofdiagnosis_model_y = data_reg['cas2_att_ado']
  model_demo_pad16_ageofdiagnosis = sm.OLS(demo_pad16_ageofdiagnosis_model_y,
         demo_pad16_ageofdiagnosis_model_x,
         missing='drop')
  results_demo_pad16_ageofdiagnosis = model_demo_pad16_ageofdiagnosis.fit()
  results_demo_pad16_ageofdiagnosis.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[341]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:           cas2_att_ado   R-squared:                       0.000
: Model:                            OLS   Adj. R-squared:                 -0.038
: Method:                 Least Squares   F-statistic:                  0.004083
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.950
: Time:                        08:25:43   Log-Likelihood:                -112.45
: No. Observations:                  28   AIC:                             228.9
: Df Residuals:                      26   BIC:                             231.6
: Df Model:                           1
: Covariance Type:            nonrobust
: =============================================================================================
:                                 coef    std err          t      P>|t|      [0.025      0.975]
: ---------------------------------------------------------------------------------------------
: const                        86.4285      6.689     12.921      0.000      72.679     100.178
: demo_pad16_ageofdiagnosis     0.0451      0.706      0.064      0.950      -1.405       1.496
: ==============================================================================
: Omnibus:                        5.946   Durbin-Watson:                   1.993
: Prob(Omnibus):                  0.051   Jarque-Bera (JB):                2.491
: Skew:                          -0.415   Prob(JB):                        0.288
: Kurtosis:                       1.797   Cond. No.                         24.3
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

*** Planning
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['demo_pad16_ageofdiagnosis', 'cas2_plan_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[342]:
# text/plain
:                            demo_pad16_ageofdiagnosis  cas2_plan_ado
: demo_pad16_ageofdiagnosis                   1.000000      -0.048183
: cas2_plan_ado                              -0.048183       1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  demo_pad16_ageofdiagnosis_model_x = sm.add_constant(data_reg['demo_pad16_ageofdiagnosis'])
  demo_pad16_ageofdiagnosis_model_y = data_reg['cas2_plan_ado']
  model_demo_pad16_ageofdiagnosis = sm.OLS(demo_pad16_ageofdiagnosis_model_y,
         demo_pad16_ageofdiagnosis_model_x,
         missing='drop')
  results_demo_pad16_ageofdiagnosis = model_demo_pad16_ageofdiagnosis.fit()
  results_demo_pad16_ageofdiagnosis.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[343]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:          cas2_plan_ado   R-squared:                       0.002
: Model:                            OLS   Adj. R-squared:                 -0.038
: Method:                 Least Squares   F-statistic:                   0.05817
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.811
: Time:                        08:25:45   Log-Likelihood:                -102.09
: No. Observations:                  27   AIC:                             208.2
: Df Residuals:                      25   BIC:                             210.8
: Df Model:                           1
: Covariance Type:            nonrobust
: =============================================================================================
:                                 coef    std err          t      P>|t|      [0.025      0.975]
: ---------------------------------------------------------------------------------------------
: const                        85.3562      5.299     16.109      0.000      74.443      96.269
: demo_pad16_ageofdiagnosis    -0.1357      0.563     -0.241      0.811      -1.294       1.023
: ==============================================================================
: Omnibus:                        0.009   Durbin-Watson:                   2.407
: Prob(Omnibus):                  0.996   Jarque-Bera (JB):                0.154
: Skew:                          -0.038   Prob(JB):                        0.926
: Kurtosis:                       2.638   Cond. No.                         23.7
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

*** Simultaneous
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['demo_pad16_ageofdiagnosis', 'cas2_sim_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[344]:
# text/plain
:                            demo_pad16_ageofdiagnosis  cas2_sim_ado
: demo_pad16_ageofdiagnosis                   1.000000     -0.023133
: cas2_sim_ado                               -0.023133      1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  demo_pad16_ageofdiagnosis_model_x = sm.add_constant(data_reg['demo_pad16_ageofdiagnosis'])
  demo_pad16_ageofdiagnosis_model_y = data_reg['cas2_sim_ado']
  model_demo_pad16_ageofdiagnosis = sm.OLS(demo_pad16_ageofdiagnosis_model_y,
         demo_pad16_ageofdiagnosis_model_x,
         missing='drop')
  results_demo_pad16_ageofdiagnosis = model_demo_pad16_ageofdiagnosis.fit()
  results_demo_pad16_ageofdiagnosis.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[345]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:           cas2_sim_ado   R-squared:                       0.001
: Model:                            OLS   Adj. R-squared:                 -0.038
: Method:                 Least Squares   F-statistic:                   0.01392
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.907
: Time:                        08:25:46   Log-Likelihood:                -107.15
: No. Observations:                  28   AIC:                             218.3
: Df Residuals:                      26   BIC:                             221.0
: Df Model:                           1
: Covariance Type:            nonrobust
: =============================================================================================
:                                 coef    std err          t      P>|t|      [0.025      0.975]
: ---------------------------------------------------------------------------------------------
: const                        90.9934      5.537     16.434      0.000      79.612     102.374
: demo_pad16_ageofdiagnosis    -0.0689      0.584     -0.118      0.907      -1.270       1.132
: ==============================================================================
: Omnibus:                        0.254   Durbin-Watson:                   1.696
: Prob(Omnibus):                  0.881   Jarque-Bera (JB):                0.025
: Skew:                          -0.070   Prob(JB):                        0.987
: Kurtosis:                       2.957   Cond. No.                         24.3
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:
*** Successive
**** Correlation analysis
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
data_reg[['demo_pad16_ageofdiagnosis', 'cas2_succ_ado']].corr()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[346]:
# text/plain
:                            demo_pad16_ageofdiagnosis  cas2_succ_ado
: demo_pad16_ageofdiagnosis                   1.000000       0.093801
: cas2_succ_ado                               0.093801       1.000000
:END:

**** All cases
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  demo_pad16_ageofdiagnosis_model_x = sm.add_constant(data_reg['demo_pad16_ageofdiagnosis'])
  demo_pad16_ageofdiagnosis_model_y = data_reg['cas2_succ_ado']
  model_demo_pad16_ageofdiagnosis = sm.OLS(demo_pad16_ageofdiagnosis_model_y,
         demo_pad16_ageofdiagnosis_model_x,
         missing='drop')
  results_demo_pad16_ageofdiagnosis = model_demo_pad16_ageofdiagnosis.fit()
  results_demo_pad16_ageofdiagnosis.summary()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[347]:
# output
/usr/local/lib/python3.6/site-packages/numpy/core/fromnumeric.py:2389: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.
  return ptp(axis=axis, out=out, **kwargs)

# text/plain
: <class 'statsmodels.iolib.summary.Summary'>
: """
:                             OLS Regression Results
: ==============================================================================
: Dep. Variable:          cas2_succ_ado   R-squared:                       0.009
: Model:                            OLS   Adj. R-squared:                 -0.029
: Method:                 Least Squares   F-statistic:                    0.2308
: Date:                Mon, 03 Jun 2019   Prob (F-statistic):              0.635
: Time:                        08:25:47   Log-Likelihood:                -103.42
: No. Observations:                  28   AIC:                             210.8
: Df Residuals:                      26   BIC:                             213.5
: Df Model:                           1
: Covariance Type:            nonrobust
: =============================================================================================
:                                 coef    std err          t      P>|t|      [0.025      0.975]
: ---------------------------------------------------------------------------------------------
: const                        92.5740      4.846     19.103      0.000      82.613     102.535
: demo_pad16_ageofdiagnosis     0.2456      0.511      0.480      0.635      -0.805       1.296
: ==============================================================================
: Omnibus:                        0.330   Durbin-Watson:                   1.995
: Prob(Omnibus):                  0.848   Jarque-Bera (JB):                0.362
: Skew:                          -0.226   Prob(JB):                        0.834
: Kurtosis:                       2.675   Cond. No.                         24.3
: ==============================================================================
:
: Warnings:
: [1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
: """
:END:

** Hb1c comparison
*** Prepare data
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_hb1c_comp = data_reg.copy()
  data_hb1c_comp = data_hb1c_comp[['Code',
                  'cas2_att_ado',
                  'cas2_plan_ado',
                  'cas2_sim_ado',
                  'cas2_succ_ado',
                  'Hb1c']]
  data_hb1c_comp['hb1c classification'] = np.nan
  data_hb1c_comp.loc[data_hb1c_comp['Hb1c'] <= 7.0, 'hb1c classification'] = 'normal'
  data_hb1c_comp.loc[data_hb1c_comp['Hb1c'] > 7.0, 'hb1c classification'] = 'high'
  data_hb1c_comp.info()
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[348]:
# output
<class 'pandas.core.frame.DataFrame'>
Int64Index: 28 entries, 0 to 27
Data columns (total 7 columns):
Code                   28 non-null int64
cas2_att_ado           28 non-null float64
cas2_plan_ado          27 non-null float64
cas2_sim_ado           28 non-null float64
cas2_succ_ado          28 non-null float64
Hb1c                   24 non-null float64
hb1c classification    24 non-null object
dtypes: float64(5), int64(1), object(1)
memory usage: 1.8+ KB

:END:

Organize data by variable (ie, process with all groups).
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  # get data for each group
  data_hb1c_comp_att = data_hb1c_comp.loc[:,
                                 ['Code', 'hb1c classification', 'cas2_att_ado']]
  data_hb1c_comp_plan = data_hb1c_comp.loc[:,
                                 ['Code', 'hb1c classification', 'cas2_plan_ado']]
  data_hb1c_comp_sim = data_hb1c_comp.loc[:,
                                 ['Code', 'hb1c classification', 'cas2_sim_ado']]
  data_hb1c_comp_succ = data_hb1c_comp.loc[:,
                                 ['Code', 'hb1c classification', 'cas2_succ_ado']]
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[349]:
:END:

*** Descriptive stats
**** Distribution Hb1c
#+BEGIN_SRC ipython :session  :exports results :results output :display image/png
  distplot_hb1c = sns.distplot(data_hb1c_comp['Hb1c'].dropna())
  distplot_hb1c_fig = distplot_hb1c.get_figure()
  distplot_hb1c_fig_path = '{}distplot_hb1c.jpg'.format(fig_dir)
  distplot_hb1c_fig.savefig(distplot_hb1c_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[350]:
# output
/usr/local/lib/python3.6/site-packages/scipy/stats/stats.py:1706: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval

# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-dbFfKY.png]]
:END:

**** Tables
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  data_group_comp_bygroup = data_hb1c_comp.groupby('hb1c classification')
  data_group_comp_bygroup.describe().transpose().round(2)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[351]:
# text/plain
: hb1c classification    high  normal
: Code          count   14.00   10.00
:               mean    15.00   13.10
:               std      7.67    9.59
:               min      3.00    1.00
:               25%      9.50    5.00
:               50%     14.50   11.00
:               75%     19.75   22.75
:               max     29.00   25.00
: cas2_att_ado  count   14.00   10.00
:               mean    89.07   82.60
:               std     12.54   13.48
:               min     64.00   67.00
:               25%     79.00   70.75
:               50%     94.00   82.00
:               75%     96.25   92.50
:               max    106.00  103.00
: cas2_plan_ado count   13.00   10.00
:               mean    84.15   86.00
:               std     11.25   10.03
:               min     66.00   74.00
:               25%     77.00   77.00
:               50%     82.00   85.00
:               75%     88.00   93.25
:               max    105.00  103.00
: cas2_sim_ado  count   14.00   10.00
:               mean    88.07   94.10
:               std     10.27   11.31
:               min     63.00   80.00
:               25%     82.75   85.75
:               50%     89.50   93.50
:               75%     94.75  100.00
:               max    100.00  113.00
: cas2_succ_ado count   14.00   10.00
:               mean    94.64   95.70
:               std      7.08   12.74
:               min     85.00   73.00
:               25%     91.00   91.00
:               50%     92.50   97.00
:               75%     99.25  105.25
:               max    109.00  114.00
: Hb1c          count   14.00   10.00
:               mean     9.08    6.54
:               std      1.76    0.48
:               min      7.22    5.60
:               25%      8.00    6.25
:               50%      8.15    6.70
:               75%     10.50    6.90
:               max     12.00    7.00
:END:

Confidence intervals
#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
  # get att data
  data_hb1c_comp_att_high = data_hb1c_comp_att.loc[data_hb1c_comp_att['hb1c classification'] == 'high',
                                  'cas2_att_ado']
  data_hb1c_comp_att_normal = data_hb1c_comp_att.loc[data_hb1c_comp_att['hb1c classification'] == 'normal',
                                  'cas2_att_ado']

  # get plan data
  data_hb1c_comp_plan_high = data_hb1c_comp_plan.loc[data_hb1c_comp_plan['hb1c classification'] == 'high',
                                  'cas2_plan_ado']
  data_hb1c_comp_plan_normal = data_hb1c_comp_plan.loc[data_hb1c_comp_plan['hb1c classification'] == 'normal',
                                  'cas2_plan_ado']

  # get sim data
  data_hb1c_comp_sim_high = data_hb1c_comp_sim.loc[data_hb1c_comp_sim['hb1c classification'] == 'high',
                                  'cas2_sim_ado']
  data_hb1c_comp_sim_normal = data_hb1c_comp_sim.loc[data_hb1c_comp_sim['hb1c classification'] == 'normal',
                                  'cas2_sim_ado']

  # get succ data
  data_hb1c_comp_succ_high = data_hb1c_comp_succ.loc[data_hb1c_comp_succ['hb1c classification'] == 'high',
                                  'cas2_succ_ado']
  data_hb1c_comp_succ_normal = data_hb1c_comp_succ.loc[data_hb1c_comp_succ['hb1c classification'] == 'normal',
                                  'cas2_succ_ado']

  # CI for att/diab
  ci_object_att_high = DescrStatsW(data_hb1c_comp_att_high.dropna(how='all'))
  ci_att_high = ci_object_att_high.tconfint_mean()

  # CI for att/cont
  ci_object_att_normal = DescrStatsW(data_hb1c_comp_att_normal.dropna(how='all'))
  ci_att_normal = ci_object_att_normal.tconfint_mean()

  # CI for plan/diab
  ci_object_plan_high = DescrStatsW(data_hb1c_comp_plan_high.dropna(how='all'))
  ci_plan_high = ci_object_plan_high.tconfint_mean()

  # CI for att/cont
  ci_object_plan_normal = DescrStatsW(data_hb1c_comp_plan_normal.dropna(how='all'))
  ci_plan_normal = ci_object_plan_normal.tconfint_mean()

  # CI for sim/diab
  ci_object_sim_high = DescrStatsW(data_hb1c_comp_sim_high.dropna(how='all'))
  ci_sim_high = ci_object_sim_high.tconfint_mean()

  # CI for att/cont
  ci_object_sim_normal = DescrStatsW(data_hb1c_comp_sim_normal.dropna(how='all'))
  ci_sim_normal = ci_object_sim_normal.tconfint_mean()

  # CI for succ/diab
  ci_object_succ_high = DescrStatsW(data_hb1c_comp_succ_high.dropna(how='all'))
  ci_succ_high = ci_object_succ_high.tconfint_mean()

  # CI for att/cont
  ci_object_succ_normal = DescrStatsW(data_hb1c_comp_succ_normal.dropna(how='all'))
  ci_succ_normal = ci_object_succ_normal.tconfint_mean()
  print('CI att normal: ', ci_att_normal)
  print('CI att high: ', ci_att_high)
  print()
  print('CI plan normal: ', ci_plan_normal)
  print('CI plan high: ', ci_plan_high)
  print()
  print('CI sim normal: ', ci_sim_normal)
  print('CI sim high: ', ci_sim_high)
  print()
  print('CI succ normal: ', ci_succ_normal)
  print('CI succ high: ', ci_succ_high)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[352]:
# output
CI att normal:  (72.9599187075234, 92.24008129247659)
CI att high:  (81.82988338173323, 96.31297376112391)

CI plan normal:  (78.8226253204021, 93.1773746795979)
CI plan high:  (77.35343051691116, 90.95426179078116)

CI sim normal:  (86.01052542373219, 102.1894745762678)
CI sim high:  (82.14218095667984, 94.0006761861773)

CI succ normal:  (86.58843831061276, 104.81156168938725)
CI succ high:  (90.55633239537646, 98.72938189033782)

:END:

**** Figures
***** Attention
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_hb1c_comp_att = sns.boxplot(x='hb1c classification', y='cas2_att_ado', data=data_hb1c_comp_att)

  boxplot_hb1c_comp_att_fig = boxplot_hb1c_comp_att.get_figure()
  boxplot_hb1c_comp_att_fig_path = '{}boxplot_hb1c_comp_att_bygroup.jpg'.format(fig_dir)
  boxplot_hb1c_comp_att_fig.savefig(boxplot_hb1c_comp_att_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[353]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-QJRQTW.png]]
:END:


***** Planning
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_hb1c_comp_plan = sns.boxplot(x='hb1c classification', y='cas2_plan_ado', data=data_hb1c_comp_plan)
  boxplot_hb1c_comp_plan_fig = boxplot_hb1c_comp_plan.get_figure()
  boxplot_hb1c_comp_plan_fig_path = '{}boxplot_hb1c_comp_plan_bygroup.jpg'.format(fig_dir)
  boxplot_hb1c_comp_plan_fig.savefig(boxplot_hb1c_comp_plan_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[354]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-CIaNLk.png]]
:END:


***** Simultaneous
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_hb1c_comp_sim = sns.boxplot(x='hb1c classification', y='cas2_sim_ado', data=data_hb1c_comp_sim)
  boxplot_hb1c_comp_sim_fig = boxplot_hb1c_comp_sim.get_figure()
  boxplot_hb1c_comp_sim_fig_path = '{}boxplot_hb1c_comp_sim_bygroup.jpg'.format(fig_dir)
  boxplot_hb1c_comp_sim_fig.savefig(boxplot_hb1c_comp_sim_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[355]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-mdrTHh.png]]
:END:


***** Successive
#+BEGIN_SRC ipython :session  :export results :display image/png
  boxplot_hb1c_comp_succ = sns.boxplot(x='hb1c classification', y='cas2_succ_ado', data=data_hb1c_comp_succ)
  boxplot_hb1c_comp_succ_fig = boxplot_hb1c_comp_succ.get_figure()
  boxplot_hb1c_comp_succ_fig_path = '{}boxplot_hb1c_comp_succ_bygroup.jpg'.format(fig_dir)
  boxplot_hb1c_comp_succ_fig.savefig(boxplot_hb1c_comp_succ_fig_path)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[356]:
# image/png
[[file:obipy-resources/2a184861c8c9b35cf32116fe352ae791-3xDvOT.png]]
:END:

*** Group comparisons
**** Attention

#+BEGIN_SRC ipython  :session  :exports results :results html
  # get data
  data_hb1c_comp_att_normal = data_hb1c_comp_att.loc[data_hb1c_comp_att['hb1c classification'] == 'normal', 'cas2_att_ado']
  data_hb1c_comp_att_high = data_hb1c_comp_att.loc[data_hb1c_comp_att['hb1c classification'] == 'high', 'cas2_att_ado']

  descr_obj_hb1c_comp_att_normal = DescrStatsW(data_hb1c_comp_att_normal.dropna(how='all'))
  descr_obj_hb1c_comp_att_high = DescrStatsW(data_hb1c_comp_att_high.dropna(how='all'))
  compare_means_hb1c_comp_att = CompareMeans(descr_obj_hb1c_comp_att_normal,
                                   descr_obj_hb1c_comp_att_high)

  results_hb1c_comp_att_comp = compare_means_hb1c_comp_att.summary(usevar='unequal')
  print(results_hb1c_comp_att_comp.as_html())
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
# Out[377]:
# output
<table class="simpletable">
<caption>Test for equality of means</caption>
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>
</tr>
<tr>
  <th>subset #1</th> <td>   -6.4714</td> <td>    5.422</td> <td>   -1.194</td> <td> 0.248</td> <td>  -17.834</td> <td>    4.891</td>
</tr>
</table>

#+END_HTML

#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
res_mw_att = stats.mannwhitneyu(data_hb1c_comp_att_normal, data_hb1c_comp_att_high)
res_mw_att
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[358]:
# text/plain
: MannwhitneyuResult(statistic=50.0, pvalue=0.12453145176314406)
:END:

**** Planning
#+BEGIN_SRC ipython  :session  :exports results :results output :results html
  # get data
  data_hb1c_comp_plan_normal = data_hb1c_comp_plan.loc[data_hb1c_comp_plan['hb1c classification'] == 'normal',
                                    'cas2_plan_ado']
  data_hb1c_comp_plan_high = data_hb1c_comp_plan.loc[data_hb1c_comp_plan['hb1c classification'] == 'high',
                                     'cas2_plan_ado']

  descr_obj_hb1c_comp_plan_normal = DescrStatsW(data_hb1c_comp_plan_normal.dropna(how='all'))
  descr_obj_hb1c_comp_plan_high = DescrStatsW(data_hb1c_comp_plan_high.dropna(how='all'))
  compare_means_hb1c_comp_plan = CompareMeans(descr_obj_hb1c_comp_plan_normal,
                                   descr_obj_hb1c_comp_plan_high)

  results_hb1c_comp_plan_comp = compare_means_hb1c_comp_plan.summary(usevar='unequal')
  print(results_hb1c_comp_plan_comp.as_html())
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
# Out[378]:
# output
<table class="simpletable">
<caption>Test for equality of means</caption>
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>
</tr>
<tr>
  <th>subset #1</th> <td>    1.8462</td> <td>    4.451</td> <td>    0.415</td> <td> 0.683</td> <td>   -7.424</td> <td>   11.116</td>
</tr>
</table>

#+END_HTML

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
res_mw_plan = stats.mannwhitneyu(data_hb1c_comp_plan_normal, data_hb1c_comp_plan_high)
res_mw_plan
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[360]:
# text/plain
: MannwhitneyuResult(statistic=69.0, pvalue=0.48823197753671915)
:END:

**** Simultaneous
#+BEGIN_SRC ipython  :session  :exports results :results output :results html
  # get data
  data_hb1c_comp_sim_normal = data_hb1c_comp_sim.loc[data_hb1c_comp_sim['hb1c classification'] == 'normal',
                                    'cas2_sim_ado']
  data_hb1c_comp_sim_high = data_hb1c_comp_sim.loc[data_hb1c_comp_sim['hb1c classification'] == 'high',
                                     'cas2_sim_ado']

  descr_obj_hb1c_comp_sim_normal = DescrStatsW(data_hb1c_comp_sim_normal.dropna(how='all'))
  descr_obj_hb1c_comp_sim_high = DescrStatsW(data_hb1c_comp_sim_high.dropna(how='all'))
  compare_means_hb1c_comp_sim = CompareMeans(descr_obj_hb1c_comp_sim_normal,
                                   descr_obj_hb1c_comp_sim_high)

  results_hb1c_comp_sim_comp = compare_means_hb1c_comp_sim.summary(usevar='unequal')
  print(results_hb1c_comp_sim_comp.as_html())
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
# Out[379]:
# output
<table class="simpletable">
<caption>Test for equality of means</caption>
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>
</tr>
<tr>
  <th>subset #1</th> <td>    6.0286</td> <td>    4.508</td> <td>    1.337</td> <td> 0.197</td> <td>   -3.430</td> <td>   15.487</td>
</tr>
</table>

#+END_HTML

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
res_mw_sim = stats.mannwhitneyu(data_hb1c_comp_sim_normal, data_hb1c_comp_sim_high)
res_mw_sim
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[362]:
# text/plain
: MannwhitneyuResult(statistic=52.5, pvalue=0.158124733054277)
:END:

**** Successiveeee
#+BEGIN_SRC ipython  :session  :exports results :results output :results html
  # get data
  data_hb1c_comp_succ_normal = data_hb1c_comp_succ.loc[data_hb1c_comp_succ['hb1c classification'] == 'normal',
                                    'cas2_succ_ado']
  data_hb1c_comp_succ_high = data_hb1c_comp_succ.loc[data_hb1c_comp_succ['hb1c classification'] == 'high',
                                     'cas2_succ_ado']

  descr_obj_hb1c_comp_succ_normal = DescrStatsW(data_hb1c_comp_succ_normal.dropna(how='all'))
  descr_obj_hb1c_comp_succ_high = DescrStatsW(data_hb1c_comp_succ_high.dropna(how='all'))
  compare_means_hb1c_comp_succ = CompareMeans(descr_obj_hb1c_comp_succ_normal,
                                   descr_obj_hb1c_comp_succ_high)

  results_hb1c_comp_succ_comp = compare_means_hb1c_comp_succ.summary(usevar='unequal')
  print(results_hb1c_comp_succ_comp.as_html())
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
# Out[381]:
# output
<table class="simpletable">
<caption>Test for equality of means</caption>
<tr>
      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>
</tr>
<tr>
  <th>subset #1</th> <td>    1.0571</td> <td>    4.450</td> <td>    0.238</td> <td> 0.816</td> <td>   -8.558</td> <td>   10.673</td>
</tr>
</table>

#+END_HTML

#+BEGIN_SRC ipython :session :exports results :results output :display text/plain
res_mw_succ = stats.mannwhitneyu(data_hb1c_comp_succ_normal, data_hb1c_comp_succ_high)
res_mw_succ
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[364]:
# text/plain
: MannwhitneyuResult(statistic=61.0, pvalue=0.3066575818030995)
:END:

*** Multiple comparisons corrections
#+BEGIN_SRC ipython :session  :exports results :results output :display text/plain
  res_mw_pvalues = [float(res_mw_att[1]),
                    float(res_mw_plan[1]),
                    float(res_mw_sim[1]),
                    float(res_mw_succ[1])]
  res_mw_pvalues_cor = multipletests(res_mw_pvalues)
  for res in res_mw_pvalues_cor:
      print(res)
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[365]:
# output
[False False False False]
[0.41256179 0.51927629 0.41256179 0.51927629]
0.012741455098566168
0.0125

:END:

Corrected pvalues for group comparisons:
Attention: src_ipython[:session :exports results]{round(res_mw_pvalues_cor[1][0], 2)} {{{results(0.41)}}}
Planning: src_ipython[:session :exports results]{round(res_mw_pvalues_cor[1][1], 2)} {{{results(0.52)}}}
Simulteanous: src_ipython[:session :exports results]{round(res_mw_pvalues_cor[1][2], 2)} {{{results(0.41)}}}
Successive: src_ipython[:session :exports results]{round(res_mw_pvalues_cor[1][3], 2)} {{{results(0.52)}}}
